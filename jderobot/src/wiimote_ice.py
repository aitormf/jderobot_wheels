# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `wiimote.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'Time' not in _M_jderobot.__dict__:
    _M_jderobot.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, seconds=0, useconds=0):
            self.seconds = seconds
            self.useconds = useconds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.seconds)
            _h = 5 * _h + Ice.getHash(self.useconds)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_jderobot.Time):
                return NotImplemented
            else:
                if self.seconds is None or other.seconds is None:
                    if self.seconds != other.seconds:
                        return (-1 if self.seconds is None else 1)
                else:
                    if self.seconds < other.seconds:
                        return -1
                    elif self.seconds > other.seconds:
                        return 1
                if self.useconds is None or other.useconds is None:
                    if self.useconds != other.useconds:
                        return (-1 if self.useconds is None else 1)
                else:
                    if self.useconds < other.useconds:
                        return -1
                    elif self.useconds > other.useconds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Time)

        __repr__ = __str__

    _M_jderobot._t_Time = IcePy.defineStruct('::jderobot::Time', Time, (), (
        ('seconds', (), IcePy._t_long),
        ('useconds', (), IcePy._t_long)
    ))

    _M_jderobot.Time = Time
    del Time

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'JderobotException' not in _M_jderobot.__dict__:
    _M_jderobot.JderobotException = Ice.createTempClass()
    class JderobotException(Ice.UserException):
        def __init__(self, what=''):
            self.what = what

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::JderobotException'

    _M_jderobot._t_JderobotException = IcePy.defineException('::jderobot::JderobotException', JderobotException, (), False, None, (('what', (), IcePy._t_string, False, 0),))
    JderobotException._ice_type = _M_jderobot._t_JderobotException

    _M_jderobot.JderobotException = JderobotException
    del JderobotException

if 'ConfigurationNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.ConfigurationNotExistException = Ice.createTempClass()
    class ConfigurationNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::ConfigurationNotExistException'

    _M_jderobot._t_ConfigurationNotExistException = IcePy.defineException('::jderobot::ConfigurationNotExistException', ConfigurationNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    ConfigurationNotExistException._ice_type = _M_jderobot._t_ConfigurationNotExistException

    _M_jderobot.ConfigurationNotExistException = ConfigurationNotExistException
    del ConfigurationNotExistException

if 'DataNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.DataNotExistException = Ice.createTempClass()
    class DataNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::DataNotExistException'

    _M_jderobot._t_DataNotExistException = IcePy.defineException('::jderobot::DataNotExistException', DataNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    DataNotExistException._ice_type = _M_jderobot._t_DataNotExistException

    _M_jderobot.DataNotExistException = DataNotExistException
    del DataNotExistException

if 'HardwareFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.HardwareFailedException = Ice.createTempClass()
    class HardwareFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::HardwareFailedException'

    _M_jderobot._t_HardwareFailedException = IcePy.defineException('::jderobot::HardwareFailedException', HardwareFailedException, (), False, _M_jderobot._t_JderobotException, ())
    HardwareFailedException._ice_type = _M_jderobot._t_HardwareFailedException

    _M_jderobot.HardwareFailedException = HardwareFailedException
    del HardwareFailedException

if 'NoTopicException' not in _M_jderobot.__dict__:
    _M_jderobot.NoTopicException = Ice.createTempClass()
    class NoTopicException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::NoTopicException'

    _M_jderobot._t_NoTopicException = IcePy.defineException('::jderobot::NoTopicException', NoTopicException, (), False, _M_jderobot._t_JderobotException, ())
    NoTopicException._ice_type = _M_jderobot._t_NoTopicException

    _M_jderobot.NoTopicException = NoTopicException
    del NoTopicException

if 'SubscriptionFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionFailedException = Ice.createTempClass()
    class SubscriptionFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::SubscriptionFailedException'

    _M_jderobot._t_SubscriptionFailedException = IcePy.defineException('::jderobot::SubscriptionFailedException', SubscriptionFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionFailedException._ice_type = _M_jderobot._t_SubscriptionFailedException

    _M_jderobot.SubscriptionFailedException = SubscriptionFailedException
    del SubscriptionFailedException

if 'SubscriptionPushFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionPushFailedException = Ice.createTempClass()
    class SubscriptionPushFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::SubscriptionPushFailedException'

    _M_jderobot._t_SubscriptionPushFailedException = IcePy.defineException('::jderobot::SubscriptionPushFailedException', SubscriptionPushFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionPushFailedException._ice_type = _M_jderobot._t_SubscriptionPushFailedException

    _M_jderobot.SubscriptionPushFailedException = SubscriptionPushFailedException
    del SubscriptionPushFailedException

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if '_t_ByteSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_ByteSeq = IcePy.defineSequence('::jderobot::ByteSeq', (), IcePy._t_byte)

if '_t_IntSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_IntSeq = IcePy.defineSequence('::jderobot::IntSeq', (), IcePy._t_int)

if '_t_seqFloat' not in _M_jderobot.__dict__:
    _M_jderobot._t_seqFloat = IcePy.defineSequence('::jderobot::seqFloat', (), IcePy._t_float)

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'AccelerometerData' not in _M_jderobot.__dict__:
    _M_jderobot.AccelerometerData = Ice.createTempClass()
    class AccelerometerData(Ice.Object):
        def __init__(self, accelerometer=None):
            self.accelerometer = accelerometer

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::AccelerometerData')

        def ice_id(self, current=None):
            return '::jderobot::AccelerometerData'

        def ice_staticId():
            return '::jderobot::AccelerometerData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_AccelerometerData)

        __repr__ = __str__

    _M_jderobot.AccelerometerDataPrx = Ice.createTempClass()
    class AccelerometerDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.AccelerometerDataPrx.ice_checkedCast(proxy, '::jderobot::AccelerometerData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.AccelerometerDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::AccelerometerData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_AccelerometerDataPrx = IcePy.defineProxy('::jderobot::AccelerometerData', AccelerometerDataPrx)

    _M_jderobot._t_AccelerometerData = IcePy.defineClass('::jderobot::AccelerometerData', AccelerometerData, -1, (), False, False, None, (), (('accelerometer', (), _M_jderobot._t_IntSeq, False, 0),))
    AccelerometerData._ice_type = _M_jderobot._t_AccelerometerData

    _M_jderobot.AccelerometerData = AccelerometerData
    del AccelerometerData

    _M_jderobot.AccelerometerDataPrx = AccelerometerDataPrx
    del AccelerometerDataPrx

if 'InfraredData' not in _M_jderobot.__dict__:
    _M_jderobot.InfraredData = Ice.createTempClass()
    class InfraredData(Ice.Object):
        def __init__(self, infrared1=None, infrared2=None, infrared3=None, infrared4=None, sourceDetected=0):
            self.infrared1 = infrared1
            self.infrared2 = infrared2
            self.infrared3 = infrared3
            self.infrared4 = infrared4
            self.sourceDetected = sourceDetected

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::InfraredData')

        def ice_id(self, current=None):
            return '::jderobot::InfraredData'

        def ice_staticId():
            return '::jderobot::InfraredData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_InfraredData)

        __repr__ = __str__

    _M_jderobot.InfraredDataPrx = Ice.createTempClass()
    class InfraredDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.InfraredDataPrx.ice_checkedCast(proxy, '::jderobot::InfraredData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.InfraredDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::InfraredData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_InfraredDataPrx = IcePy.defineProxy('::jderobot::InfraredData', InfraredDataPrx)

    _M_jderobot._t_InfraredData = IcePy.defineClass('::jderobot::InfraredData', InfraredData, -1, (), False, False, None, (), (
        ('infrared1', (), _M_jderobot._t_IntSeq, False, 0),
        ('infrared2', (), _M_jderobot._t_IntSeq, False, 0),
        ('infrared3', (), _M_jderobot._t_IntSeq, False, 0),
        ('infrared4', (), _M_jderobot._t_IntSeq, False, 0),
        ('sourceDetected', (), IcePy._t_int, False, 0)
    ))
    InfraredData._ice_type = _M_jderobot._t_InfraredData

    _M_jderobot.InfraredData = InfraredData
    del InfraredData

    _M_jderobot.InfraredDataPrx = InfraredDataPrx
    del InfraredDataPrx

if 'NunchukData' not in _M_jderobot.__dict__:
    _M_jderobot.NunchukData = Ice.createTempClass()
    class NunchukData(Ice.Object):
        def __init__(self, button=0, stick=None, acc=None):
            self.button = button
            self.stick = stick
            self.acc = acc

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::NunchukData')

        def ice_id(self, current=None):
            return '::jderobot::NunchukData'

        def ice_staticId():
            return '::jderobot::NunchukData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_NunchukData)

        __repr__ = __str__

    _M_jderobot.NunchukDataPrx = Ice.createTempClass()
    class NunchukDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.NunchukDataPrx.ice_checkedCast(proxy, '::jderobot::NunchukData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.NunchukDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::NunchukData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_NunchukDataPrx = IcePy.defineProxy('::jderobot::NunchukData', NunchukDataPrx)

    _M_jderobot._t_NunchukData = IcePy.defineClass('::jderobot::NunchukData', NunchukData, -1, (), False, False, None, (), (
        ('button', (), IcePy._t_int, False, 0),
        ('stick', (), _M_jderobot._t_IntSeq, False, 0),
        ('acc', (), _M_jderobot._t_IntSeq, False, 0)
    ))
    NunchukData._ice_type = _M_jderobot._t_NunchukData

    _M_jderobot.NunchukData = NunchukData
    del NunchukData

    _M_jderobot.NunchukDataPrx = NunchukDataPrx
    del NunchukDataPrx

if 'wiiMote' not in _M_jderobot.__dict__:
    _M_jderobot.wiiMote = Ice.createTempClass()
    class wiiMote(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.wiiMote:
                raise RuntimeError('jderobot.wiiMote is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::wiiMote')

        def ice_id(self, current=None):
            return '::jderobot::wiiMote'

        def ice_staticId():
            return '::jderobot::wiiMote'
        ice_staticId = staticmethod(ice_staticId)

        def setValue(self, Value, current=None):
            pass

        def changeRumbleMode(self, current=None):
            pass

        def changeIrMode(self, current=None):
            pass

        def changeAccMode(self, current=None):
            pass

        def changeButtonMode(self, current=None):
            pass

        def changeNunchukMode(self, current=None):
            pass

        def activateLed(self, led, current=None):
            pass

        def getButtonData(self, current=None):
            pass

        def getNunchukData(self, current=None):
            pass

        def getAccData(self, current=None):
            pass

        def getIrData(self, current=None):
            pass

        def getBatteryStatus(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_wiiMote)

        __repr__ = __str__

    _M_jderobot.wiiMotePrx = Ice.createTempClass()
    class wiiMotePrx(Ice.ObjectPrx):

        def setValue(self, Value, _ctx=None):
            return _M_jderobot.wiiMote._op_setValue.invoke(self, ((Value, ), _ctx))

        def begin_setValue(self, Value, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_setValue.begin(self, ((Value, ), _response, _ex, _sent, _ctx))

        def end_setValue(self, _r):
            return _M_jderobot.wiiMote._op_setValue.end(self, _r)

        def changeRumbleMode(self, _ctx=None):
            return _M_jderobot.wiiMote._op_changeRumbleMode.invoke(self, ((), _ctx))

        def begin_changeRumbleMode(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_changeRumbleMode.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_changeRumbleMode(self, _r):
            return _M_jderobot.wiiMote._op_changeRumbleMode.end(self, _r)

        def changeIrMode(self, _ctx=None):
            return _M_jderobot.wiiMote._op_changeIrMode.invoke(self, ((), _ctx))

        def begin_changeIrMode(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_changeIrMode.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_changeIrMode(self, _r):
            return _M_jderobot.wiiMote._op_changeIrMode.end(self, _r)

        def changeAccMode(self, _ctx=None):
            return _M_jderobot.wiiMote._op_changeAccMode.invoke(self, ((), _ctx))

        def begin_changeAccMode(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_changeAccMode.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_changeAccMode(self, _r):
            return _M_jderobot.wiiMote._op_changeAccMode.end(self, _r)

        def changeButtonMode(self, _ctx=None):
            return _M_jderobot.wiiMote._op_changeButtonMode.invoke(self, ((), _ctx))

        def begin_changeButtonMode(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_changeButtonMode.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_changeButtonMode(self, _r):
            return _M_jderobot.wiiMote._op_changeButtonMode.end(self, _r)

        def changeNunchukMode(self, _ctx=None):
            return _M_jderobot.wiiMote._op_changeNunchukMode.invoke(self, ((), _ctx))

        def begin_changeNunchukMode(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_changeNunchukMode.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_changeNunchukMode(self, _r):
            return _M_jderobot.wiiMote._op_changeNunchukMode.end(self, _r)

        def activateLed(self, led, _ctx=None):
            return _M_jderobot.wiiMote._op_activateLed.invoke(self, ((led, ), _ctx))

        def begin_activateLed(self, led, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_activateLed.begin(self, ((led, ), _response, _ex, _sent, _ctx))

        def end_activateLed(self, _r):
            return _M_jderobot.wiiMote._op_activateLed.end(self, _r)

        def getButtonData(self, _ctx=None):
            return _M_jderobot.wiiMote._op_getButtonData.invoke(self, ((), _ctx))

        def begin_getButtonData(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_getButtonData.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getButtonData(self, _r):
            return _M_jderobot.wiiMote._op_getButtonData.end(self, _r)

        def getNunchukData(self, _ctx=None):
            return _M_jderobot.wiiMote._op_getNunchukData.invoke(self, ((), _ctx))

        def begin_getNunchukData(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_getNunchukData.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getNunchukData(self, _r):
            return _M_jderobot.wiiMote._op_getNunchukData.end(self, _r)

        def getAccData(self, _ctx=None):
            return _M_jderobot.wiiMote._op_getAccData.invoke(self, ((), _ctx))

        def begin_getAccData(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_getAccData.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAccData(self, _r):
            return _M_jderobot.wiiMote._op_getAccData.end(self, _r)

        def getIrData(self, _ctx=None):
            return _M_jderobot.wiiMote._op_getIrData.invoke(self, ((), _ctx))

        def begin_getIrData(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_getIrData.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getIrData(self, _r):
            return _M_jderobot.wiiMote._op_getIrData.end(self, _r)

        def getBatteryStatus(self, _ctx=None):
            return _M_jderobot.wiiMote._op_getBatteryStatus.invoke(self, ((), _ctx))

        def begin_getBatteryStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.wiiMote._op_getBatteryStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getBatteryStatus(self, _r):
            return _M_jderobot.wiiMote._op_getBatteryStatus.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.wiiMotePrx.ice_checkedCast(proxy, '::jderobot::wiiMote', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.wiiMotePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::wiiMote'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_wiiMotePrx = IcePy.defineProxy('::jderobot::wiiMote', wiiMotePrx)

    _M_jderobot._t_wiiMote = IcePy.defineClass('::jderobot::wiiMote', wiiMote, -1, (), True, False, None, (), ())
    wiiMote._ice_type = _M_jderobot._t_wiiMote

    wiiMote._op_setValue = IcePy.Operation('setValue', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_changeRumbleMode = IcePy.Operation('changeRumbleMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_changeIrMode = IcePy.Operation('changeIrMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_changeAccMode = IcePy.Operation('changeAccMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_changeButtonMode = IcePy.Operation('changeButtonMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_changeNunchukMode = IcePy.Operation('changeNunchukMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_activateLed = IcePy.Operation('activateLed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_getButtonData = IcePy.Operation('getButtonData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    wiiMote._op_getNunchukData = IcePy.Operation('getNunchukData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_jderobot._t_NunchukData, False, 0), ())
    wiiMote._op_getAccData = IcePy.Operation('getAccData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_jderobot._t_AccelerometerData, False, 0), ())
    wiiMote._op_getIrData = IcePy.Operation('getIrData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_jderobot._t_InfraredData, False, 0), ())
    wiiMote._op_getBatteryStatus = IcePy.Operation('getBatteryStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.wiiMote = wiiMote
    del wiiMote

    _M_jderobot.wiiMotePrx = wiiMotePrx
    del wiiMotePrx

# End of module jderobot
