# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `bodyencoders.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'Time' not in _M_jderobot.__dict__:
    _M_jderobot.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, seconds=0, useconds=0):
            self.seconds = seconds
            self.useconds = useconds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.seconds)
            _h = 5 * _h + Ice.getHash(self.useconds)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_jderobot.Time):
                return NotImplemented
            else:
                if self.seconds is None or other.seconds is None:
                    if self.seconds != other.seconds:
                        return (-1 if self.seconds is None else 1)
                else:
                    if self.seconds < other.seconds:
                        return -1
                    elif self.seconds > other.seconds:
                        return 1
                if self.useconds is None or other.useconds is None:
                    if self.useconds != other.useconds:
                        return (-1 if self.useconds is None else 1)
                else:
                    if self.useconds < other.useconds:
                        return -1
                    elif self.useconds > other.useconds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Time)

        __repr__ = __str__

    _M_jderobot._t_Time = IcePy.defineStruct('::jderobot::Time', Time, (), (
        ('seconds', (), IcePy._t_long),
        ('useconds', (), IcePy._t_long)
    ))

    _M_jderobot.Time = Time
    del Time

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'JderobotException' not in _M_jderobot.__dict__:
    _M_jderobot.JderobotException = Ice.createTempClass()
    class JderobotException(Ice.UserException):
        def __init__(self, what=''):
            self.what = what

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::JderobotException'

    _M_jderobot._t_JderobotException = IcePy.defineException('::jderobot::JderobotException', JderobotException, (), False, None, (('what', (), IcePy._t_string, False, 0),))
    JderobotException._ice_type = _M_jderobot._t_JderobotException

    _M_jderobot.JderobotException = JderobotException
    del JderobotException

if 'ConfigurationNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.ConfigurationNotExistException = Ice.createTempClass()
    class ConfigurationNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::ConfigurationNotExistException'

    _M_jderobot._t_ConfigurationNotExistException = IcePy.defineException('::jderobot::ConfigurationNotExistException', ConfigurationNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    ConfigurationNotExistException._ice_type = _M_jderobot._t_ConfigurationNotExistException

    _M_jderobot.ConfigurationNotExistException = ConfigurationNotExistException
    del ConfigurationNotExistException

if 'DataNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.DataNotExistException = Ice.createTempClass()
    class DataNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::DataNotExistException'

    _M_jderobot._t_DataNotExistException = IcePy.defineException('::jderobot::DataNotExistException', DataNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    DataNotExistException._ice_type = _M_jderobot._t_DataNotExistException

    _M_jderobot.DataNotExistException = DataNotExistException
    del DataNotExistException

if 'HardwareFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.HardwareFailedException = Ice.createTempClass()
    class HardwareFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::HardwareFailedException'

    _M_jderobot._t_HardwareFailedException = IcePy.defineException('::jderobot::HardwareFailedException', HardwareFailedException, (), False, _M_jderobot._t_JderobotException, ())
    HardwareFailedException._ice_type = _M_jderobot._t_HardwareFailedException

    _M_jderobot.HardwareFailedException = HardwareFailedException
    del HardwareFailedException

if 'NoTopicException' not in _M_jderobot.__dict__:
    _M_jderobot.NoTopicException = Ice.createTempClass()
    class NoTopicException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::NoTopicException'

    _M_jderobot._t_NoTopicException = IcePy.defineException('::jderobot::NoTopicException', NoTopicException, (), False, _M_jderobot._t_JderobotException, ())
    NoTopicException._ice_type = _M_jderobot._t_NoTopicException

    _M_jderobot.NoTopicException = NoTopicException
    del NoTopicException

if 'SubscriptionFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionFailedException = Ice.createTempClass()
    class SubscriptionFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::SubscriptionFailedException'

    _M_jderobot._t_SubscriptionFailedException = IcePy.defineException('::jderobot::SubscriptionFailedException', SubscriptionFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionFailedException._ice_type = _M_jderobot._t_SubscriptionFailedException

    _M_jderobot.SubscriptionFailedException = SubscriptionFailedException
    del SubscriptionFailedException

if 'SubscriptionPushFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionPushFailedException = Ice.createTempClass()
    class SubscriptionPushFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::SubscriptionPushFailedException'

    _M_jderobot._t_SubscriptionPushFailedException = IcePy.defineException('::jderobot::SubscriptionPushFailedException', SubscriptionPushFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionPushFailedException._ice_type = _M_jderobot._t_SubscriptionPushFailedException

    _M_jderobot.SubscriptionPushFailedException = SubscriptionPushFailedException
    del SubscriptionPushFailedException

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if '_t_ByteSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_ByteSeq = IcePy.defineSequence('::jderobot::ByteSeq', (), IcePy._t_byte)

if '_t_IntSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_IntSeq = IcePy.defineSequence('::jderobot::IntSeq', (), IcePy._t_int)

if '_t_seqFloat' not in _M_jderobot.__dict__:
    _M_jderobot._t_seqFloat = IcePy.defineSequence('::jderobot::seqFloat', (), IcePy._t_float)

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'BodySide' not in _M_jderobot.__dict__:
    _M_jderobot.BodySide = Ice.createTempClass()
    class BodySide(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    BodySide.Left = BodySide("Left", 0)
    BodySide.Right = BodySide("Right", 1)
    BodySide._enumerators = { 0:BodySide.Left, 1:BodySide.Right }

    _M_jderobot._t_BodySide = IcePy.defineEnum('::jderobot::BodySide', BodySide, (), BodySide._enumerators)

    _M_jderobot.BodySide = BodySide
    del BodySide

if 'CameraBody' not in _M_jderobot.__dict__:
    _M_jderobot.CameraBody = Ice.createTempClass()
    class CameraBody(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    CameraBody.Top = CameraBody("Top", 0)
    CameraBody.Bottom = CameraBody("Bottom", 1)
    CameraBody._enumerators = { 0:CameraBody.Top, 1:CameraBody.Bottom }

    _M_jderobot._t_CameraBody = IcePy.defineEnum('::jderobot::CameraBody', CameraBody, (), CameraBody._enumerators)

    _M_jderobot.CameraBody = CameraBody
    del CameraBody

if 'MotorsName' not in _M_jderobot.__dict__:
    _M_jderobot.MotorsName = Ice.createTempClass()
    class MotorsName(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    MotorsName.HipYawPitch = MotorsName("HipYawPitch", 0)
    MotorsName.HipPitch = MotorsName("HipPitch", 1)
    MotorsName.HipRoll = MotorsName("HipRoll", 2)
    MotorsName.KneePitch = MotorsName("KneePitch", 3)
    MotorsName.AnklePitch = MotorsName("AnklePitch", 4)
    MotorsName.AnkleRoll = MotorsName("AnkleRoll", 5)
    MotorsName.ShoulderPitch = MotorsName("ShoulderPitch", 6)
    MotorsName.ShoulderRoll = MotorsName("ShoulderRoll", 7)
    MotorsName.ElbowYaw = MotorsName("ElbowYaw", 8)
    MotorsName.ElbowRoll = MotorsName("ElbowRoll", 9)
    MotorsName._enumerators = { 0:MotorsName.HipYawPitch, 1:MotorsName.HipPitch, 2:MotorsName.HipRoll, 3:MotorsName.KneePitch, 4:MotorsName.AnklePitch, 5:MotorsName.AnkleRoll, 6:MotorsName.ShoulderPitch, 7:MotorsName.ShoulderRoll, 8:MotorsName.ElbowYaw, 9:MotorsName.ElbowRoll }

    _M_jderobot._t_MotorsName = IcePy.defineEnum('::jderobot::MotorsName', MotorsName, (), MotorsName._enumerators)

    _M_jderobot.MotorsName = MotorsName
    del MotorsName

if 'BodyMotor' not in _M_jderobot.__dict__:
    _M_jderobot.BodyMotor = Ice.createTempClass()
    class BodyMotor(object):
        """
        simply body motor
        """
        def __init__(self, pitch=0.0, yaw=0.0, roll=0.0):
            self.pitch = pitch
            self.yaw = yaw
            self.roll = roll

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.BodyMotor):
                return NotImplemented
            else:
                if self.pitch != other.pitch:
                    return False
                if self.yaw != other.yaw:
                    return False
                if self.roll != other.roll:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_BodyMotor)

        __repr__ = __str__

    _M_jderobot._t_BodyMotor = IcePy.defineStruct('::jderobot::BodyMotor', BodyMotor, (), (
        ('pitch', (), IcePy._t_float),
        ('yaw', (), IcePy._t_float),
        ('roll', (), IcePy._t_float)
    ))

    _M_jderobot.BodyMotor = BodyMotor
    del BodyMotor

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'ArmEncodersData' not in _M_jderobot.__dict__:
    _M_jderobot.ArmEncodersData = Ice.createTempClass()
    class ArmEncodersData(Ice.Object):
        """
        Arm
        """
        def __init__(self, shoulder=Ice._struct_marker, elbow=Ice._struct_marker, clock=0):
            if shoulder is Ice._struct_marker:
                self.shoulder = _M_jderobot.BodyMotor()
            else:
                self.shoulder = shoulder
            if elbow is Ice._struct_marker:
                self.elbow = _M_jderobot.BodyMotor()
            else:
                self.elbow = elbow
            self.clock = clock

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::ArmEncodersData')

        def ice_id(self, current=None):
            return '::jderobot::ArmEncodersData'

        def ice_staticId():
            return '::jderobot::ArmEncodersData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_ArmEncodersData)

        __repr__ = __str__

    _M_jderobot.ArmEncodersDataPrx = Ice.createTempClass()
    class ArmEncodersDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.ArmEncodersDataPrx.ice_checkedCast(proxy, '::jderobot::ArmEncodersData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.ArmEncodersDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::ArmEncodersData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_ArmEncodersDataPrx = IcePy.defineProxy('::jderobot::ArmEncodersData', ArmEncodersDataPrx)

    _M_jderobot._t_ArmEncodersData = IcePy.defineClass('::jderobot::ArmEncodersData', ArmEncodersData, -1, (), False, False, None, (), (
        ('shoulder', (), _M_jderobot._t_BodyMotor, False, 0),
        ('elbow', (), _M_jderobot._t_BodyMotor, False, 0),
        ('clock', (), IcePy._t_int, False, 0)
    ))
    ArmEncodersData._ice_type = _M_jderobot._t_ArmEncodersData

    _M_jderobot.ArmEncodersData = ArmEncodersData
    del ArmEncodersData

    _M_jderobot.ArmEncodersDataPrx = ArmEncodersDataPrx
    del ArmEncodersDataPrx

if 'LegEncodersData' not in _M_jderobot.__dict__:
    _M_jderobot.LegEncodersData = Ice.createTempClass()
    class LegEncodersData(Ice.Object):
        """
        Leg
        """
        def __init__(self, hip=Ice._struct_marker, knee=Ice._struct_marker, ankle=Ice._struct_marker, clock=0):
            if hip is Ice._struct_marker:
                self.hip = _M_jderobot.BodyMotor()
            else:
                self.hip = hip
            if knee is Ice._struct_marker:
                self.knee = _M_jderobot.BodyMotor()
            else:
                self.knee = knee
            if ankle is Ice._struct_marker:
                self.ankle = _M_jderobot.BodyMotor()
            else:
                self.ankle = ankle
            self.clock = clock

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::LegEncodersData')

        def ice_id(self, current=None):
            return '::jderobot::LegEncodersData'

        def ice_staticId():
            return '::jderobot::LegEncodersData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_LegEncodersData)

        __repr__ = __str__

    _M_jderobot.LegEncodersDataPrx = Ice.createTempClass()
    class LegEncodersDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.LegEncodersDataPrx.ice_checkedCast(proxy, '::jderobot::LegEncodersData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.LegEncodersDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::LegEncodersData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_LegEncodersDataPrx = IcePy.defineProxy('::jderobot::LegEncodersData', LegEncodersDataPrx)

    _M_jderobot._t_LegEncodersData = IcePy.defineClass('::jderobot::LegEncodersData', LegEncodersData, -1, (), False, False, None, (), (
        ('hip', (), _M_jderobot._t_BodyMotor, False, 0),
        ('knee', (), _M_jderobot._t_BodyMotor, False, 0),
        ('ankle', (), _M_jderobot._t_BodyMotor, False, 0),
        ('clock', (), IcePy._t_int, False, 0)
    ))
    LegEncodersData._ice_type = _M_jderobot._t_LegEncodersData

    _M_jderobot.LegEncodersData = LegEncodersData
    del LegEncodersData

    _M_jderobot.LegEncodersDataPrx = LegEncodersDataPrx
    del LegEncodersDataPrx

if 'OdometryData' not in _M_jderobot.__dict__:
    _M_jderobot.OdometryData = Ice.createTempClass()
    class OdometryData(Ice.Object):
        """
        camera odometry
        """
        def __init__(self, odometry=None):
            self.odometry = odometry

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::OdometryData')

        def ice_id(self, current=None):
            return '::jderobot::OdometryData'

        def ice_staticId():
            return '::jderobot::OdometryData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_OdometryData)

        __repr__ = __str__

    _M_jderobot.OdometryDataPrx = Ice.createTempClass()
    class OdometryDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.OdometryDataPrx.ice_checkedCast(proxy, '::jderobot::OdometryData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.OdometryDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::OdometryData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_OdometryDataPrx = IcePy.defineProxy('::jderobot::OdometryData', OdometryDataPrx)

    _M_jderobot._t_OdometryData = IcePy.defineClass('::jderobot::OdometryData', OdometryData, -1, (), False, False, None, (), (('odometry', (), _M_jderobot._t_seqFloat, False, 0),))
    OdometryData._ice_type = _M_jderobot._t_OdometryData

    _M_jderobot.OdometryData = OdometryData
    del OdometryData

    _M_jderobot.OdometryDataPrx = OdometryDataPrx
    del OdometryDataPrx

if 'BodyEncoders' not in _M_jderobot.__dict__:
    _M_jderobot.BodyEncoders = Ice.createTempClass()
    class BodyEncoders(Ice.Object):
        """
        Interface to the Humanoid Body Encoders.
        """
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.BodyEncoders:
                raise RuntimeError('jderobot.BodyEncoders is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::BodyEncoders')

        def ice_id(self, current=None):
            return '::jderobot::BodyEncoders'

        def ice_staticId():
            return '::jderobot::BodyEncoders'
        ice_staticId = staticmethod(ice_staticId)

        def getArmEncodersData(self, side, current=None):
            pass

        def getLegEncodersData(self, side, current=None):
            pass

        def getOdometryData(self, camera, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_BodyEncoders)

        __repr__ = __str__

    _M_jderobot.BodyEncodersPrx = Ice.createTempClass()
    class BodyEncodersPrx(Ice.ObjectPrx):

        def getArmEncodersData(self, side, _ctx=None):
            return _M_jderobot.BodyEncoders._op_getArmEncodersData.invoke(self, ((side, ), _ctx))

        def begin_getArmEncodersData(self, side, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.BodyEncoders._op_getArmEncodersData.begin(self, ((side, ), _response, _ex, _sent, _ctx))

        def end_getArmEncodersData(self, _r):
            return _M_jderobot.BodyEncoders._op_getArmEncodersData.end(self, _r)

        def getLegEncodersData(self, side, _ctx=None):
            return _M_jderobot.BodyEncoders._op_getLegEncodersData.invoke(self, ((side, ), _ctx))

        def begin_getLegEncodersData(self, side, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.BodyEncoders._op_getLegEncodersData.begin(self, ((side, ), _response, _ex, _sent, _ctx))

        def end_getLegEncodersData(self, _r):
            return _M_jderobot.BodyEncoders._op_getLegEncodersData.end(self, _r)

        def getOdometryData(self, camera, _ctx=None):
            return _M_jderobot.BodyEncoders._op_getOdometryData.invoke(self, ((camera, ), _ctx))

        def begin_getOdometryData(self, camera, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.BodyEncoders._op_getOdometryData.begin(self, ((camera, ), _response, _ex, _sent, _ctx))

        def end_getOdometryData(self, _r):
            return _M_jderobot.BodyEncoders._op_getOdometryData.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.BodyEncodersPrx.ice_checkedCast(proxy, '::jderobot::BodyEncoders', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.BodyEncodersPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::BodyEncoders'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_BodyEncodersPrx = IcePy.defineProxy('::jderobot::BodyEncoders', BodyEncodersPrx)

    _M_jderobot._t_BodyEncoders = IcePy.defineClass('::jderobot::BodyEncoders', BodyEncoders, -1, (), True, False, None, (), ())
    BodyEncoders._ice_type = _M_jderobot._t_BodyEncoders

    BodyEncoders._op_getArmEncodersData = IcePy.Operation('getArmEncodersData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_jderobot._t_BodySide, False, 0),), (), ((), _M_jderobot._t_ArmEncodersData, False, 0), ())
    BodyEncoders._op_getLegEncodersData = IcePy.Operation('getLegEncodersData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_jderobot._t_BodySide, False, 0),), (), ((), _M_jderobot._t_LegEncodersData, False, 0), ())
    BodyEncoders._op_getOdometryData = IcePy.Operation('getOdometryData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_jderobot._t_CameraBody, False, 0),), (), ((), _M_jderobot._t_OdometryData, False, 0), ())

    _M_jderobot.BodyEncoders = BodyEncoders
    del BodyEncoders

    _M_jderobot.BodyEncodersPrx = BodyEncodersPrx
    del BodyEncodersPrx

# End of module jderobot
